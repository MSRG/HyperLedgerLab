{#
######################################################
########## ZOOKEEPER DEPLOYMENT AND SERVICE ###########
######################################################
#}
{% for i in range(fabric_num_zookeeper|int) %}
{% set zookeeper_id=loop.index0 %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: $namespace
  name: zookeeper{{ zookeeper_id }}-$namespace
spec:
  selector:
    matchLabels:
      app: hyperledger
      role: zookeeper
      org: $namespace
      zookeeper-id: zookeeper{{ zookeeper_id }}
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        app: hyperledger
        role: zookeeper
        org: $namespace
        zookeeper-id: zookeeper{{ zookeeper_id }}
    spec:
      containers:
      - name: zookeeper{{ zookeeper_id }}-$namespace
        image: {{ fabric_images['zookeeper'] }}
        env:
        - name: ZOOKEEPER_CLIENT_PORT
          value: "2181"
        - name: ZOOKEEPER_TICK_TIME
          value: "2000"
        - name: ZOO_SERVERS
          value: "{% for j in range(fabric_num_zookeeper|int) %}server.{{ loop.index }}={% if loop.index0 == zookeeper_id %}0.0.0.0{% else %}zookeeper{{ loop.index0 }}.$namespace{% endif %}:2888:3888 {% endfor %}"
        - name: ZOO_MY_ID
          value: "{{ loop.index }}"             # Must be between 1 and 255
        ports:
          - containerPort: 2181
          - containerPort: 2888
          - containerPort: 3888
{% if k8s_image_pull_secret.use == true %}
      imagePullSecrets:
        - name: {{ k8s_image_pull_secret.name }}
{% endif %}

---
apiVersion: v1
kind: Service
metadata:
  name: zookeeper{{ zookeeper_id }}
  namespace: $namespace
spec:
  selector:
    app: hyperledger
    role: zookeeper
    org: $namespace
    zookeeper-id: zookeeper{{ zookeeper_id }}
  type: ClusterIP
  ports:
    - name: zk1
      protocol: TCP
      port: 2181
      targetPort: 2181
    - name: zk2
      protocol: TCP
      port: 2888
      targetPort: 2888
    - name: zk3
      protocol: TCP
      port: 3888
      targetPort: 3888

{% endfor %}



{#
######################################################
########## KAFKA DEPLOYMENT AND SERVICE ###########
######################################################
#}
{% for i in range(fabric_num_kafka|int) %}
{% set kafka_id=loop.index0 %}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: $namespace
  name: kafka{{ kafka_id }}-$namespace
spec:
  selector:
    matchLabels:
      app: hyperledger
      role: kafka
      org: $namespace
      kafka-id: kafka{{ kafka_id }}
  replicas: 1
  strategy: {}
  template:
    metadata:
      labels:
        app: hyperledger
        role: kafka
        org: $namespace
        kafka-id: kafka{{ kafka_id }}
    spec:
      containers:
      - name: kafka{{ kafka_id }}-$namespace
        image: {{ fabric_images['kafka'] }}
        env:
        - name: KAFKA_BROKER_ID
          value: "{{ loop.index }}"
        - name: KAFKA_ZOOKEEPER_CONNECT
          value: "{% for j in range(fabric_num_zookeeper|int) %}zookeeper{{ loop.index0 }}.$namespace:2181{% if not loop.last %},{% endif %}{% endfor %}"
        - name: KAFKA_ADVERTISED_LISTENERS
          value: "PLAINTEXT://kafka{{ kafka_id }}.$namespace:9092"
        - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
          value: "1"
        - name: KAFKA_MESSAGE_MAX_BYTES
          value: "1048576"               # 1 * 1024 * 1024 B
        - name: KAFKA_REPLICA_FETCH_MAX_BYTES
          value: "1048576"               # 1 * 1024 * 1024 B
        - name: KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE
          value: "false"
        - name: KAFKA_LOG_RETENTION_MS
          value: "-1"
        - name: KAFKA_MIN_INSYNC_REPLICAS
{% if fabric_num_kafka|int >= 2 %}
          value: "2"
{% else %}
          value: "1"
{% endif %}
        - name: KAFKA_DEFAULT_REPLICATION_FACTOR
          value: "{{ fabric_num_kafka|int }}"
        ports:
         - containerPort: 9092
{% if k8s_image_pull_secret.use == true %}
      imagePullSecrets:
        - name: {{ k8s_image_pull_secret.name }}
{% endif %}

---
apiVersion: v1
kind: Service
metadata:
  name: kafka{{ kafka_id }}
  namespace: $namespace
spec:
  selector:
    app: hyperledger
    role: kafka
    org: $namespace
    kafka-id: kafka{{ kafka_id }}
  type: ClusterIP
  ports:
    - name: listen-endpoint
      protocol: TCP
      port: 9092
      targetPort: 9092

{% endfor %}